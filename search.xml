<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>Objective-C中的Category和Extension</title>
      <link href="/2019/10/17/Objective-C%E4%B8%AD%E7%9A%84Category%E5%92%8CExtension/"/>
      <url>/2019/10/17/Objective-C%E4%B8%AD%E7%9A%84Category%E5%92%8CExtension/</url>
      
        <content type="html"><![CDATA[<h1 id="Objective-C中的Category-分类-和Extension-类扩展"><a href="#Objective-C中的Category-分类-和Extension-类扩展" class="headerlink" title="Objective-C中的Category(分类)和Extension(类扩展)"></a>Objective-C中的Category(分类)和Extension(类扩展)</h1>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>三次握手和四次挥手</title>
      <link href="/2019/10/16/%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E5%92%8C%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B/"/>
      <url>/2019/10/16/%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E5%92%8C%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="关于三次握手和四次挥手的一些整理"><a href="#关于三次握手和四次挥手的一些整理" class="headerlink" title="关于三次握手和四次挥手的一些整理"></a>关于三次握手和四次挥手的一些整理</h1><h2 id="三次握手"><a href="#三次握手" class="headerlink" title="三次握手"></a>三次握手</h2><ul><li><p>指在建立TCP连接时，需要客户端和服务器总共发送3个包，简称三次握手(Three-way Handshake)。它的主要作用是为了确认双方的接受能力和发送能力是否正常，实质上是连接服务器指定端口，建立TCP连接，同步连接双方的确认号，交换TCP窗口大小信息。</p></li><li><p>当客户端处于Closed状态，服务端处于Listen状态，进行三次握手：</p><ol><li><p>第一次握手：客户端给服务端发送SYN报文，并指明客户端的初始化序列号ISN(c)。此时客户端处于SYN_SEND状态。</p><p>首部的同步位SYN=1，初始序号seq=x，SYN=1的报文段不能携带数据，但要消耗掉一个序号。</p></li><li><p>第二次握手：服务端收到客户端的SYN报文之后，会以自己的SYN报文作为应答，并且也是指定了自己的初始化序列号ISN(s)。同时会把客户端的ISN+1作为ACK的值，表示自己已经收到了客户端的SYN，此时服务器处于SYN_REVD的状态。</p><p>在确认报文段中SYN=1，ACK=1，确认号ack=x+1，初始序号seq=y。</p></li><li><p>第三次握手：客户端收到SYN报文之后，会发送一个ACK报文，把ISN+1作为ACK的值，表示已经收到了服务端的SYN报文，此时客户端处于ESTABLISHED状态。服务端收到ACK报文之后，也处于ESTABLISHED状态，此时双方建立连接。</p><p>在确认报文段ACK=1，确认号ack=y+1，序号seq=x+1(初始为seq=x，第二个报文段+1)，ACK报文段可以携带数据，不携带数据则不消耗序号。</p></li></ol><p>在Socket编程中，客户端执行connect()时，将触发三次握手。</p><p><img src="/2019/10/16/三次握手和四次挥手/三次握手.jpg" alt="三次握手四次挥手"></p></li></ul><h2 id="为什么一定要三次握手呢？"><a href="#为什么一定要三次握手呢？" class="headerlink" title="为什么一定要三次握手呢？"></a>为什么一定要三次握手呢？</h2><ul><li><p>三次握手的目的：</p><ol><li>第一次握手：客户端发送网络包，服务端收到了。 这样服务端就能得出结论：客户端的发送能力、服务端的接收能力是正常的。</li><li>第二次握手：服务端发包，客户端收到了。 这样客户端就能得出结论：服务端的接收、发送能力，客户端的接收、发送能力是正常的。不过此时服务器并不能确认客户端的接收能力是否正常。</li><li>第三次握手：客户端发包，服务端收到了。 这样服务端就能得出结论：客户端的接收、发送能力正常，服务器自己的发送、接收能力也正常。</li></ol><p>所以我们需要三次握手来达成校验的目的。</p></li></ul><h2 id="四次挥手"><a href="#四次挥手" class="headerlink" title="四次挥手"></a>四次挥手</h2><ul><li><p>建立一个连接需要三次握手，终止一个连接需要四次挥手。</p></li><li><p>四次挥手过程如下：</p><ol><li>第一次挥手：客户端发送一个 FIN 报文，报文中会指定一个序列号。此时客户端处于 <code>FIN_WAIT1</code> 状态。 即发出<strong>连接释放报文段</strong>（FIN=1，序号seq=u），并停止再发送数据，主动关闭TCP连接，进入FIN_WAIT1（终止等待1）状态，等待服务端的确认。</li><li>第二次挥手：服务端收到 FIN 之后，会发送 ACK 报文，且把客户端的序列号值 +1 作为 ACK 报文的序列号值，表明已经收到客户端的报文了，此时服务端处于 <code>CLOSE_WAIT</code> 状态。 即服务端收到连接释放报文段后即发出<strong>确认报文段</strong>（ACK=1，确认号ack=u+1，序号seq=v），服务端进入CLOSE_WAIT（关闭等待）状态，此时的TCP处于半关闭状态，客户端到服务端的连接释放。客户端收到服务端的确认后，进入FIN_WAIT2（终止等待2）状态，等待服务端发出的连接释放报文段。</li><li>第三次挥手：如果服务端也想断开连接了，和客户端的第一次挥手一样，发给 FIN 报文，且指定一个序列号。此时服务端处于 <code>LAST_ACK</code> 的状态。 即服务端没有要向客户端发出的数据，服务端发出<strong>连接释放报文段</strong>（FIN=1，ACK=1，序号seq=w，确认号ack=u+1），服务端进入LAST_ACK（最后确认）状态，等待客户端的确认。</li><li>第四次挥手：客户端收到 FIN 之后，一样发送一个 ACK 报文作为应答，且把服务端的序列号值 +1 作为自己 ACK 报文的序列号值，此时客户端处于 <code>TIME_WAIT</code> 状态。需要过一阵子以确保服务端收到自己的 ACK 报文之后才会进入 CLOSED 状态，服务端收到 ACK 报文之后，就处于关闭连接了，处于 <code>CLOSED</code> 状态。 即客户端收到服务端的连接释放报文段后，对此发出<strong>确认报文段</strong>（ACK=1，seq=u+1，ack=w+1），客户端进入TIME_WAIT（时间等待）状态。此时TCP未释放掉，需要经过时间等待计时器设置的时间2MSL后，客户端才进入CLOSED状态。</li></ol><p>在Socket编程中，任何一端close()操作即可产生挥手操作。</p><p><img src="/2019/10/16/三次握手和四次挥手/四次挥手.jpeg" alt="三次握手四次挥手"></p><h2 id="为什么挥手四次？"><a href="#为什么挥手四次？" class="headerlink" title="为什么挥手四次？"></a>为什么挥手四次？</h2><ul><li>因为当服务端收到客户端的SYN连接请求报文后，可以直接发送SYN+ACK报文。其中<strong>ACK报文是用来应答的，SYN报文是用来同步的</strong>。但是关闭连接时，当服务端收到FIN报文时，很可能并不会立即关闭SOCKET，所以只能先回复一个ACK报文，告诉客户端，”你发的FIN报文我收到了”。只有等到我服务端所有的报文都发送完了，我才能发送FIN报文，因此不能一起发送。故需要四次挥手。</li></ul><h2 id="等待2MSL的意义？"><a href="#等待2MSL的意义？" class="headerlink" title="等待2MSL的意义？"></a>等待2MSL的意义？</h2><ul><li><strong>MSL是Maximum Segment Lifetime的英文缩写，可译为“最长报文段寿命”，它是任何报文在网络上存在的最长时间，超过这个时间报文将被丢弃。</strong></li><li>为了保证客户端发送的最后一个ACK报文段能够到达服务器。因为这个ACK有可能丢失，从而导致处在LAST-ACK状态的服务器收不到对FIN-ACK的确认报文。服务器会超时重传这个FIN-ACK，接着客户端再重传一次确认，重新启动时间等待计时器。最后客户端和服务器都能正常的关闭。假设客户端不等待2MSL，而是在发送完ACK之后直接释放关闭，一但这个ACK丢失的话，服务器就无法正常的进入关闭连接状态。</li></ul></li></ul><p>参考链接：<a href="https://juejin.im/post/5d9c284b518825095879e7a5" target="_blank" rel="noopener">https://juejin.im/post/5d9c284b518825095879e7a5</a></p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>伪随机数机制</title>
      <link href="/2019/10/15/%E4%BC%AA%E9%9A%8F%E6%9C%BA%E6%95%B0%E6%9C%BA%E5%88%B6/"/>
      <url>/2019/10/15/%E4%BC%AA%E9%9A%8F%E6%9C%BA%E6%95%B0%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="伪随机数机制"><a href="#伪随机数机制" class="headerlink" title="伪随机数机制"></a>伪随机数机制</h2><ul><li><p>伪随机数是什么</p><ol><li>看似随机生成实则有周期性序列</li><li>由算法生成的必然是伪随机数，只能通过优化算法不断接近随机</li></ol></li><li><p>真随机数呢？</p><p>通过真实随机事件取得的随机数</p></li><li><p>Java中产生随机数的两种方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Math.random()</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Random()</span><br></pre></td></tr></table></figure></li></ul><ol><li><p>Math.random</p><p>返回取值范围[0.0, 1.0)的double值，由于小数点后可以保留到15位，产生相同的数的可能性较小，在一定程度上随机</p></li><li><p>java.util.Random</p><p>有两种构造方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Random() <span class="comment">//使用一个和当前系统时间对应的相对时间有关的数字作为种子数</span></span><br><span class="line">Random(<span class="keyword">long</span> seed) <span class="comment">//直接传入一个种子数</span></span><br></pre></td></tr></table></figure><p><strong>什么是种子数？</strong></p><p>种子就是产生随机数的第一次使用值,机制是通过一个函数,将这个种子的值转化为随机数空间中的某一个点上,并且产生的随机数均匀的散布在空间中。以后产生的随机数都与前一个随机数有关。</p></li></ol><ul><li><p>小结</p><ol><li>设定好种子后，N个随机数已经确定</li><li>Java随机数是通过算法实现的，是伪随机数</li><li>java.util.Random()相对灵活</li></ol></li></ul>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>初探线程池模式</title>
      <link href="/2019/10/14/%E5%88%9D%E6%8E%A2%E7%BA%BF%E7%A8%8B%E6%B1%A0%E6%A8%A1%E5%BC%8F/"/>
      <url>/2019/10/14/%E5%88%9D%E6%8E%A2%E7%BA%BF%E7%A8%8B%E6%B1%A0%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="设计模式之线程池模式-Thread-Pool"><a href="#设计模式之线程池模式-Thread-Pool" class="headerlink" title="设计模式之线程池模式 Thread Pool"></a>设计模式之线程池模式 Thread Pool</h2><ul><li><p>背景</p><p>线程对于要处理的任务来说是一种非常有限的资源，除了要消耗CPU和内存，线程调用的栈也占内存，所以为每一个或每一组任务创建一个线程是一件很奢侈的事。</p></li><li><p>核心思想</p><p><strong>常用的做法是使用一定数量的线程，让这些线程去执行不断产生的任务</strong></p><p>以下这段摘自网络，原文链接：<a href="https://blog.csdn.net/buyoufa/article/details/51869942" target="_blank" rel="noopener">https://blog.csdn.net/buyoufa/article/details/51869942</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ThreadPool类负责接收和存储任务以及工作者线程的生命管理。submit用于接收一个任务，客户端代码调用该方法想线程池提交一个任务；shutdown关闭线程池对外提供的服务</span><br><span class="line">Promise可借以获取相应任务执行结果的凭据对象。setResule获取相应任务执行结果的执行结果，getResule设置相应任务执行结果的执行结果。</span><br><span class="line">WorkQueue工作队列，实现任务的缓存。enqueue将任务存入队列，dequeue从队列中取出一个任务。</span><br><span class="line">WorkerThread负责任务执行的工作这线程。run逐一从工作队列中取出任务执行，runTask执行制定的任务。</span><br></pre></td></tr></table></figure><p><img src="/2019/10/14/初探线程池模式/线程池模式.png" alt="线程池模式"></p></li><li><p>线程池模式的优势</p><ol><li>抵消线程创建的开销，提高响应性</li><li>封装了工作者线程生命周期管理</li><li>减少销毁线程的开销</li></ol></li><li><p>线程池模式的劣势</p><ol><li><p>工作队列的选择：通常有三种队列方式，有界队列（BoundedQueue）工作队列本身并不限制线程池中等待运行的任务的数量，但工作队列中实际可容纳的任务取决于任务本身对资源的使用情况；无界队列(UnboundQueue)工作队列限定线程池中等待大人物的数量，在一定成都上可以限制资源的消耗；直接交接队列(SymchrinousQueue)不适用缓冲空间内部提交任务的时候调用的是工作队列的非阻塞式入队列方法，所以没有等待队列，会有新的线程对入队列失败的任务进行处理。</p></li><li><p>线程池大小调校：太大了浪费资源，太大无法充分利用资源，所以线程池大小取决于该线程池所要处理任务的特性，系统资源以及任务锁使用的稀缺资源状况。</p></li><li>线程池监控：线程池的大小，工作队列的容量，线程空闲时间限制这些熟悉的调试过程需要有程序去监控来方便调试ThreadPoolExecutor类提供了监控的方法。</li><li>线程泄露：线程池中的工作者线程会意外终止，使得线程池中实际可用的工作者线程减少。出现的原因是线程对象的run方法的异常处理没有捕获RuntimeException和Error导致run方法意外返回，使得相应线程意外终止。所以要注入捕获相应异常。但是还有一种可能情况需要注意，如果线程需要请求外部资源而且对外部资源的请求没有时间限制的话，线程实际上可能已经泄露了。</li><li>可靠性和线程池饱和处理策略：工作队列的选择对于线程大小需求变化没有处理方式，所以需要线程饱和处理策略。</li><li>死锁：线程请求类似的资源可能形成死锁。</li><li>线程池空闲线程清理：过长时间没有进行任务处理的线程是对系统资源的浪费，所以需要相应的处理代码。</li></ol></li></ul>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>GCD多线程整理</title>
      <link href="/2019/10/14/GCD%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%95%B4%E7%90%86/"/>
      <url>/2019/10/14/GCD%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%95%B4%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="OC多线程：对于GCD的一些整理"><a href="#OC多线程：对于GCD的一些整理" class="headerlink" title="OC多线程：对于GCD的一些整理"></a>OC多线程：对于GCD的一些整理</h2><ul><li><p>一、介绍</p><p><code>Grand Central Dispatch(GCD) 是 Apple 开发的一个多核编程的较新的解决方法。它主要用于优化应用程序以支持多核处理器以及其他对称多处理系统。是一个在线程池模式的基础上执行的并发任务</code></p><p><strong>优势</strong></p><ol><li>GCD 可用于多核的并行运算</li><li>GCD 会自动利用更多的 CPU 内核（比如双核、四核）</li><li>GCD 会自动管理线程的生命周期（创建线程、调度任务、销毁线程）</li><li>程序员只需要告诉GCD想要执行什么任务，不需要编写任何线程管理代码 </li></ol></li><li><p>二、任务</p><p><code>GCD的block执行的代码块，分为同步执行（sync）和异步执行（async）</code></p><p><strong>区别在于</strong>是否等待队列的任务执行结束，以及是否具备开启新线程的能力</p></li><li><p>三、队列(Dispatch Queue)</p><p><code>采用FIFO先进先出原则</code></p><p>包含<strong>串行队列</strong>和<strong>并发队列</strong></p><p><strong>串行队列</strong>：只开启一个线程，执行完一个在进行下一个</p><p><strong>并发队列</strong>：可开启多个线程，并且同时执行任务，只有在异步函数(dispach_async)下才有效</p></li><li><p>四、使用步骤</p><ol><li>创建一个队列（串行队列或并发队列）</li><li>将任务追加到任务的等待队列中，然后系统就会根据任务类型执行任务（同步执行或异步执行）</li></ol><p>任务和队列的几种组合：</p><p>|      | 串行队列                    | 并发队列                 | 主队列                   |<br>| —- | ————————— | ———————— | ———————— |<br>| 同步 | 不开新线程，串行执行任务    | 不开新线程，串行执行任务 | 不开新线程，串行执行任务 |<br>| 异步 | 开新线程(1条)，串行执行任务 | 开新线程，并发执行任务   | 不开新线程，串行执行任务 |</p></li><li><p>五、几种组合的使用</p><ol><li><p>同步+串行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">+ (void) syncSerial&#123;</span><br><span class="line">    NSLog(@&quot;当前线程：%@&quot;,[NSThread currentThread]);</span><br><span class="line">    NSLog(@&quot;同步串行任务开始&quot;);</span><br><span class="line">    dispatch_queue_t queue = dispatch_queue_create(&quot;net.gcd.syncSerialQueue&quot;, DISPATCH_QUEUE_SERIAL);</span><br><span class="line">    dispatch_async(queue, ^&#123;</span><br><span class="line">        for (NSInteger index = 0; index &lt; 2; index ++ ) &#123;</span><br><span class="line">            [NSThread sleepForTimeInterval:2];             </span><br><span class="line">            NSLog(@&quot;任务1线程: %@&quot;,[NSThread currentThread]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    dispatch_async(queue, ^&#123;</span><br><span class="line">        for (NSInteger index = 0; index &lt; 2; index ++ ) &#123;</span><br><span class="line">            [NSThread sleepForTimeInterval:2];                    </span><br><span class="line">            NSLog(@&quot;任务2线程: %@&quot;,[NSThread currentThread]);     </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    dispatch_async(queue, ^&#123;</span><br><span class="line">        for (NSInteger index = 0; index &lt; 2; index ++ ) &#123;</span><br><span class="line">            [NSThread sleepForTimeInterval:2];                    </span><br><span class="line">            NSLog(@&quot;任务3线程: %@&quot;,[NSThread currentThread]);      </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    NSLog(@&quot;同步串行任务结束&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>异步+串行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">+ (void) asyncSerial&#123;</span><br><span class="line">    NSLog(@&quot;当前线程：%@&quot;,[NSThread currentThread]);</span><br><span class="line">    NSLog(@&quot;异步串行任务开始&quot;);</span><br><span class="line">    dispatch_queue_t queue = dispatch_queue_create(&quot;net.gcd.asyncSerialQueue&quot;, DISPATCH_QUEUE_SERIAL);</span><br><span class="line">    dispatch_async(queue, ^&#123;</span><br><span class="line">        for (NSInteger index = 0; index &lt; 2; index ++ ) &#123;</span><br><span class="line">            [NSThread sleepForTimeInterval:2];</span><br><span class="line">            NSLog(@&quot;任务1线程: %@&quot;,[NSThread currentThread]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    dispatch_async(queue, ^&#123;</span><br><span class="line">        for (NSInteger index = 0; index &lt; 2; index ++ ) &#123;</span><br><span class="line">            [NSThread sleepForTimeInterval:2];</span><br><span class="line">            NSLog(@&quot;任务2线程: %@&quot;,[NSThread currentThread]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    dispatch_async(queue, ^&#123;</span><br><span class="line">        for (NSInteger index = 0; index &lt; 2; index ++ ) &#123;</span><br><span class="line">            [NSThread sleepForTimeInterval:2];</span><br><span class="line">            NSLog(@&quot;任务3线程: %@&quot;,[NSThread currentThread]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    NSLog(@&quot;异步串行任务结束&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>同步+并发</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">+ (void)syncConcurrent&#123;</span><br><span class="line">    NSLog(@&quot;当前线程 : %@&quot;,[NSThread currentThread]);</span><br><span class="line">    NSLog(@&quot;同步并发任务开始&quot;);</span><br><span class="line"></span><br><span class="line">    dispatch_queue_t queue = dispatch_queue_create(&quot;net.gcd.syncConQueue&quot;, DISPATCH_QUEUE_CONCURRENT);</span><br><span class="line">    </span><br><span class="line">    dispatch_sync(queue, ^&#123;</span><br><span class="line">        for (NSInteger index = 0; index &lt; 2; index ++ ) &#123;</span><br><span class="line">            [NSThread sleepForTimeInterval:2];</span><br><span class="line">            NSLog(@&quot;任务1线程: %@&quot;,[NSThread currentThread]);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    dispatch_sync(queue, ^&#123;</span><br><span class="line">        for (NSInteger index = 0; index &lt; 2; index ++ ) &#123;</span><br><span class="line">            [NSThread sleepForTimeInterval:2];</span><br><span class="line">            NSLog(@&quot;任务2线程: %@&quot;,[NSThread currentThread]);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    dispatch_sync(queue, ^&#123;</span><br><span class="line">        for (NSInteger index = 0; index &lt; 2; index ++ ) &#123;</span><br><span class="line">            [NSThread sleepForTimeInterval:2];</span><br><span class="line">            NSLog(@&quot;任务3线程: %@&quot;,[NSThread currentThread]);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;);</span><br><span class="line">    NSLog(@&quot;同步并发任务结束&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>异步+并发</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">+ (void) asyncConcurrent&#123;</span><br><span class="line">    NSLog(@&quot;当前线程：%@&quot;,[NSThread currentThread]);</span><br><span class="line">    NSLog(@&quot;异步并发任务开始&quot;);</span><br><span class="line">    dispatch_queue_t queue = dispatch_queue_create(&quot;net.gcd.asyncConQueue&quot;, DISPATCH_QUEUE_CONCURRENT);</span><br><span class="line">    dispatch_async(queue, ^&#123;</span><br><span class="line">        for (NSInteger index = 0; index &lt; 2; index ++ ) &#123;</span><br><span class="line">            [NSThread sleepForTimeInterval:2];</span><br><span class="line">            NSLog(@&quot;任务1线程: %@&quot;,[NSThread currentThread]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    dispatch_async(queue, ^&#123;</span><br><span class="line">        for (NSInteger index = 0; index &lt; 2; index ++ ) &#123;</span><br><span class="line">            [NSThread sleepForTimeInterval:2];</span><br><span class="line">            NSLog(@&quot;任务2线程: %@&quot;,[NSThread currentThread]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    dispatch_async(queue, ^&#123;</span><br><span class="line">        for (NSInteger index = 0; index &lt; 2; index ++ ) &#123;</span><br><span class="line">            [NSThread sleepForTimeInterval:2];</span><br><span class="line">            NSLog(@&quot;任务3线程: %@&quot;,[NSThread currentThread]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    NSLog(@&quot;异步并发任务结束&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>同步+主队列</p><p>不可用，会造成死锁。</p><p><strong>原因</strong>：当在主线程中执行syncMainTask方法，相当于把syncMainTask 任务放到了主线程的队列中。 而同步执行会等待当前队列中的任务执行完毕，才会接着执行下一个任务。那么当把任务1追加到主队列中，任务1就在等待主线程处理syncMainTask任务，而syncMainTask任务需要等待任务1执行完毕，才会接着执行。那么，当syncMainTask任务和任务1都在等待对方执行完毕，这就导致了线程卡住了，队列中的任务也执行不了。</p></li><li><p>异步+主队列</p><p>通异步+串行</p></li></ol></li><li><p>六、线程间的通讯</p><p>将耗时的任务放到其他线程上，如图片下载、文件上传等耗时的网络请求操作，将UI刷新放到主线程。完成耗时操作之后回到主线程就实现了线程间的通讯。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">+ (void) threadConnection &#123;</span><br><span class="line">    // 获取全局并发队列</span><br><span class="line">    dispatch_queue_t queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);</span><br><span class="line">    </span><br><span class="line">    // 获取主队列</span><br><span class="line">    dispatch_queue_t mainQueue = dispatch_get_main_queue();</span><br><span class="line">    </span><br><span class="line">    dispatch_async(queue, ^&#123;</span><br><span class="line">        //异步处理一些耗时操作的数据</span><br><span class="line">        </span><br><span class="line">        for (NSInteger index = 0; index &lt; 2; index ++ ) &#123;</span><br><span class="line">            [NSThread sleepForTimeInterval:2];                    // 休眠2s，模拟耗时操作</span><br><span class="line">            NSLog(@&quot;异步线程: %@&quot;,[NSThread currentThread]);       // 打印当前线程</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        dispatch_async(mainQueue, ^&#123;</span><br><span class="line">            //主线程，更新UI等等</span><br><span class="line">            </span><br><span class="line">            [NSThread sleepForTimeInterval:2];                    // 休眠2s，模拟耗时操作</span><br><span class="line">            NSLog(@&quot;主线程: %@&quot;,[NSThread currentThread]);       // 打印当前线程</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>七、一些特殊方法</p><ol><li><p>栅栏方法 dispatch_barrier_async</p><p>dispatch_barrier_async 函数会等待前边追加到并发队列中的任务全部执行完毕之后，再将指定的任务追加到该异步队列中。 后在 dispatch_barrier_async 函数追加的任务执行完毕之后，异步队列才恢复为一般动作，接着追加任务到该异步队列并开始执行。</p></li><li><p>延时方法 dispatch_after</p><p>dispatch_after 函数并不是在指定时间之后才开始执行处理，而是在指定时间之后将任务追加到主队列中。<br>严格来说，这个时间并不是绝对准确的，但想要大致延迟执行任务，dispatch_after函数是很有效的</p></li><li><p>只执行一次代码 dispatch_once</p><p>使用 dispatch_once 函数能保证某段代码在程序运行过程中只被执行一次，并且即使多线程的环境下，dispatch_once 也可以保证线程安全</p></li><li><p>快速迭代方法 dispatch_apply</p><p>dispatch_apply按照指定的次数将指定的任务追加到指定的队列中，并等待全部队列执行结束。</p><p><em>还可以利用异步队列同时遍历，例如： 遍历0-5 这6个数字，for循环的做法是每次取出一个元素，逐个遍历。而dispatch_apply 可以同时遍历多个数字</em></p></li><li><p>队列组 dispatch_group</p><ol><li>调用队列组的 dispatch_group_async 先把任务放到队列中，然后将队列放入队列组中。或者使用队列组的 dispatch_group_enter、dispatch_group_leave 组合 来实现 dispatch_group_async。  </li><li>调用队列组的 dispatch_group_notify 回到指定线程执行任务。或者使用 dispatch_group_wait 回到当前线程继续向下执行（会阻塞当前线程）。例如一个下载器中有多个下载任务*</li></ol></li><li><p>信号量 dispatch_semaphore</p><p>在dispatch_semaphore中，使用计数来完成这个功能，计数为0时等待，不可通过。计数为1或大于1时，计数减1且不等待，可通过。</p><ol><li>dispatch_semaphore_create: 创建一个Semaphore并初始化信号的总量  2. </li><li>dispatch_semaphore_signal: 发送一个信号，让信号总量加1  3. </li><li>dispatch_semaphore_wait: 可以使总信号量减1，当信号总量为0时，就会一直等待（阻塞所在线程），否则就可以正常执行。</li></ol><p><strong>信号量在开发中的实际用途</strong>：</p><ol><li>保持线程同步，将异步执行任务转换为同步执行任务</li><li>保证线程安全，为线程加锁</li></ol></li></ol></li></ul>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>Gulp优化Hexo博客访问速度</title>
      <link href="/2019/05/09/Gulp%E4%BC%98%E5%8C%96hexo%E5%8D%9A%E5%AE%A2%E8%AE%BF%E9%97%AE%E9%80%9F%E5%BA%A6/"/>
      <url>/2019/05/09/Gulp%E4%BC%98%E5%8C%96hexo%E5%8D%9A%E5%AE%A2%E8%AE%BF%E9%97%AE%E9%80%9F%E5%BA%A6/</url>
      
        <content type="html"><![CDATA[<h2 id="Hexo博客访问过慢"><a href="#Hexo博客访问过慢" class="headerlink" title="Hexo博客访问过慢"></a>Hexo博客访问过慢</h2><p>由于Hexo博客托管在github上，导致国内访问有点问题。</p><h2 id="Gulp"><a href="#Gulp" class="headerlink" title="Gulp"></a>Gulp</h2><p>Gulp是一个构建工具，能够优化&amp;压缩资源。</p><h2 id="使用Gulp优化"><a href="#使用Gulp优化" class="headerlink" title="使用Gulp优化"></a>使用Gulp优化</h2><p>首先配置安装gulp，Mac用户要加<code>sudo</code>，为了能全局使用加<code>-g</code>:<br><code>sudo npm install gulp -g</code><br><br><br>然后再博客的根目录添加<code>gulpfile.js</code>文件，内容如下:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>),</span><br><span class="line">    uglify = <span class="built_in">require</span>(<span class="string">'gulp-uglify'</span>),</span><br><span class="line">    rename = <span class="built_in">require</span>(<span class="string">'gulp-rename'</span>),</span><br><span class="line">    cssmin = <span class="built_in">require</span>(<span class="string">'gulp-minify-css'</span>),</span><br><span class="line">    imagemin = <span class="built_in">require</span>(<span class="string">'gulp-imagemin'</span>);</span><br><span class="line"><span class="comment">//JS压缩</span></span><br><span class="line">gulp.task(<span class="string">'uglify'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.src(<span class="string">'././public/js/*.js'</span>)</span><br><span class="line">        .pipe(uglify())</span><br><span class="line">        .pipe(gulp.dest(<span class="string">'././public/js/'</span>));</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//public-fancybox-js压缩</span></span><br><span class="line">gulp.task(<span class="string">'fancybox:js'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.src(<span class="string">'././public/fancybox/jquery.fancybox.js'</span>)</span><br><span class="line">        .pipe(uglify())</span><br><span class="line">        .pipe(gulp.dest(<span class="string">'././public/fancybox/'</span>));</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//public-fancybox-css压缩</span></span><br><span class="line">gulp.task(<span class="string">'fancybox:css'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.src(<span class="string">'././public/fancybox/jquery.fancybox.css'</span>)</span><br><span class="line">        .pipe(cssmin())</span><br><span class="line">        .pipe(gulp.dest(<span class="string">'././public/fancybox/'</span>));</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//CSS压缩</span></span><br><span class="line">gulp.task(<span class="string">'cssmin'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.src(<span class="string">'././public/css/style.css'</span>)</span><br><span class="line">        .pipe(cssmin())</span><br><span class="line">        .pipe(gulp.dest(<span class="string">'././public/css/'</span>));</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//图片压缩</span></span><br><span class="line">gulp.task(<span class="string">'images'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    gulp.src(<span class="string">'././public/img/*.*'</span>)</span><br><span class="line">        .pipe(imagemin(&#123;</span><br><span class="line">            progressive: <span class="literal">false</span></span><br><span class="line">        &#125;))</span><br><span class="line">        .pipe(gulp.dest(<span class="string">'././public/img/'</span>));</span><br><span class="line">&#125;);</span><br><span class="line">gulp.task(<span class="string">'build'</span>, [<span class="string">'uglify'</span>, <span class="string">'cssmin'</span>, <span class="string">'images'</span>, <span class="string">'fancybox:js'</span>, <span class="string">'fancybox:css'</span>]);</span><br></pre></td></tr></table></figure></p><p>最后输入命令<code>gulp</code>加载配置，可能会遇到如下报错信息：<br><br><br>1、<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">internal/modules/cjs/loader.js:583</span><br><span class="line">    throw err;</span><br><span class="line">    ^</span><br><span class="line"></span><br><span class="line">Error: Cannot find module <span class="string">'gulp-uglify'</span></span><br><span class="line">    at Function.Module._resolveFilename (internal/modules/cjs/loader.js:581:15)</span><br><span class="line">    at Function.Module._load (internal/modules/cjs/loader.js:507:25)</span><br><span class="line">    at Module.require (internal/modules/cjs/loader.js:637:17)</span><br><span class="line">    at require (internal/modules/cjs/helpers.js:22:18)</span><br><span class="line">    at Object.&lt;anonymous&gt; (/Users/zhangwenxuan/hexo1/gulpfile.js:2:14)</span><br><span class="line">    at Module._compile (internal/modules/cjs/loader.js:689:30)</span><br><span class="line">    at Object.Module._extensions..js (internal/modules/cjs/loader.js:700:10)</span><br><span class="line">    at Module.load (internal/modules/cjs/loader.js:599:32)</span><br><span class="line">    at tryModuleLoad (internal/modules/cjs/loader.js:538:12)</span><br><span class="line">    at Function.Module._load (internal/modules/cjs/loader.js:530:3)</span><br></pre></td></tr></table></figure></p><p>解决方案：通过<code>sudo npm install --save-dev gulp-uglify</code>安装缺失的包。<br><br><br>2、<br><code>AssertionError [ERR_ASSERTION]: Task function must be specified</code><br><br><br>解决方案：将本地的gulp版本调到3.9.0。进入博客根目录下的<code>package.json</code>，更改为<code>&quot;gulp&quot;: &quot;^3.9.0&quot;</code>，之后运行<code>npm install</code>。</p><h2 id="上传博客"><a href="#上传博客" class="headerlink" title="上传博客"></a>上传博客</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$hexo</span> cl</span><br><span class="line"><span class="variable">$hexo</span> g</span><br><span class="line"><span class="variable">$gulp</span> build</span><br><span class="line"><span class="variable">$hexo</span> d</span><br></pre></td></tr></table></figure><p>或者<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$hexo</span> cl &amp;&amp; hexo g &amp;&amp; gulp build &amp;&amp; hexo d</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>Java反射——框架设计的灵魂</title>
      <link href="/2019/04/29/Java%E5%8F%8D%E5%B0%84%E2%80%94%E2%80%94%E6%A1%86%E6%9E%B6%E8%AE%BE%E8%AE%A1%E7%9A%84%E7%81%B5%E9%AD%82/"/>
      <url>/2019/04/29/Java%E5%8F%8D%E5%B0%84%E2%80%94%E2%80%94%E6%A1%86%E6%9E%B6%E8%AE%BE%E8%AE%A1%E7%9A%84%E7%81%B5%E9%AD%82/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是反射"><a href="#什么是反射" class="headerlink" title="什么是反射"></a>什么是反射</h2><ul><li>Java反射机制是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意一个方法和属性。</li><li>想要解剖一个类，必须先要获取到该类的字节码文件对象，解剖使用的就是 Class 类中的方法，所以先要获取到每一个字节码文件对应的 Class 类型的对象。</li></ul><h2 id="反射的使用"><a href="#反射的使用" class="headerlink" title="反射的使用"></a>反射的使用</h2><p>拿测试用的 Student 类来做个演示<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">char</span> sex;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123; <span class="keyword">this</span>.age = age; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="keyword">this</span>.age; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Main Function"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//默认构造方法</span></span><br><span class="line">    Student(<span class="keyword">int</span> m) &#123;</span><br><span class="line">        System.out.println(<span class="string">"默认构造方法"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//无参构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Student's constructing"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//一个参数的构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        System.out.println(<span class="string">"姓名："</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//两个参数的构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name ,<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        System.out.println(<span class="string">"姓名："</span> + name + <span class="string">"年龄："</span> + age);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//受保护的构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">Student</span><span class="params">(<span class="keyword">boolean</span> n)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"受保护的构造方法 n = "</span> + n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//私有的构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Student</span><span class="params">(<span class="keyword">char</span> x)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"私有的构造方法 性别："</span> + x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printStudens</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"student's name: "</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">protectedFnc</span><span class="params">()</span> </span>&#123; System.out.println(<span class="string">"受保护方法"</span>); &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">defaultFnc</span><span class="params">()</span> </span>&#123; System.out.println(<span class="string">"默认方法"</span>); &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">privateFnc</span><span class="params">()</span> </span>&#123; System.out.println(<span class="string">"私有方法"</span>); &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>类中包含了构造函数、成员变量、成员函数、main函数</p><ul><li>首先要获取到 Class 对象，有如下三种方式:<br><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1</span></span><br><span class="line">Student stu1 = <span class="keyword">new</span> Student();</span><br><span class="line">Class stu1Class = stu1.getClass();</span><br><span class="line">System.out.println(stu1Class.getName());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line">Class stu2Class = Student.class;</span><br><span class="line">System.out.println(stu2Class.getName());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    Class stu3Class = Class.forName(<span class="string">"Reflection.Student"</span>);</span><br><span class="line">    System.out.println(stu3Class.getName());</span><br><span class="line">&#125;<span class="keyword">catch</span> (ClassNotFoundException e)&#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong><em>&emsp;&emsp;&emsp;&emsp;第一种方式无法体现反射的作用，第二种方式对于包的依赖过强，第三种方式常用。</em></strong></p><ul><li><p>反射获取构造函数<br><br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取公有构造方法</span></span><br><span class="line">Constructor[] conArray = clazz.getConstructors();</span><br><span class="line"><span class="keyword">for</span> (Constructor c : conArray) &#123;</span><br><span class="line">    System.out.println(c);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取所有构造方法</span></span><br><span class="line">conArray = clazz.getDeclaredConstructors();</span><br><span class="line"><span class="keyword">for</span> (Constructor c : conArray) &#123;</span><br><span class="line">    System.out.println(c);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取公有、无参构造方法</span></span><br><span class="line">Constructor con = clazz.getConstructor(<span class="keyword">null</span>);</span><br><span class="line"><span class="comment">// 调用构造方法</span></span><br><span class="line">Object obj = con.newInstance();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取私有构造方法</span></span><br><span class="line">con = clazz.getDeclaredConstructor(<span class="keyword">char</span>.class);</span><br><span class="line"><span class="comment">// 调用构造方法</span></span><br><span class="line"><span class="comment">// 暴力访问(忽略访问修饰符)</span></span><br><span class="line">con.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">obj = con.newInstance(<span class="string">'男'</span>);</span><br></pre></td></tr></table></figure></li><li><p>反射获取成员变量<br><br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 所有公有成员变量</span></span><br><span class="line">Field[] fieldArray = clazz.getFields();</span><br><span class="line"><span class="keyword">for</span> (Field f : fieldArray) &#123;</span><br><span class="line">    System.out.println(f);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 所有成员变量</span></span><br><span class="line">fieldArray = clazz.getDeclaredFields();</span><br><span class="line"><span class="keyword">for</span> (Field f : fieldArray) &#123;</span><br><span class="line">    System.out.println(f);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 公有成员变量</span></span><br><span class="line">Field f = clazz.getField(<span class="string">"name"</span>);</span><br><span class="line">System.out.println(f);</span><br><span class="line"><span class="comment">// 获取一个对象</span></span><br><span class="line">Object obj = clazz.getConstructor().newInstance();</span><br><span class="line">f.set(obj ,<span class="string">"zwx"</span>);</span><br><span class="line">Student stu = (Student)obj;</span><br><span class="line">System.out.println(<span class="string">"验证姓名："</span> + stu.name);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 私有成员变量</span></span><br><span class="line">f = clazz.getDeclaredField(<span class="string">"age"</span>);</span><br><span class="line">System.out.println(f);</span><br><span class="line"><span class="comment">// 暴力反射，解除私有限定</span></span><br><span class="line">f.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">f.set(obj ,<span class="number">22</span>);</span><br></pre></td></tr></table></figure></li><li><p>反射获取成员函数<br><br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 所有公有方法</span></span><br><span class="line">Method[] methodArray = clazz.getMethods();</span><br><span class="line"><span class="keyword">for</span> (Method m : methodArray) &#123;</span><br><span class="line">    System.out.println(m);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 所有方法</span></span><br><span class="line">methodArray = clazz.getDeclaredMethods();</span><br><span class="line"><span class="keyword">for</span> (Method m : methodArray) &#123;</span><br><span class="line">    System.out.println(m);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 公有方法</span></span><br><span class="line">Method m = clazz.getMethod(<span class="string">"printStudens"</span>);</span><br><span class="line">System.out.println(m);</span><br><span class="line">Object obj = clazz.getConstructor().newInstance();</span><br><span class="line">m.invoke(obj);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 私有方法</span></span><br><span class="line">m = clazz.getDeclaredMethod(<span class="string">"privateFnc"</span>);</span><br><span class="line">System.out.println(m);</span><br><span class="line">m.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">m.invoke(obj);</span><br></pre></td></tr></table></figure></li><li><p>反射获取 main 函数<br><br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Method methodMain = clazz.getMethod(<span class="string">"main"</span>,String[].class);</span><br><span class="line">methodMain.invoke(<span class="keyword">null</span> ,(Object)<span class="keyword">new</span> String[]&#123;<span class="string">"a"</span>,<span class="string">"b"</span>&#125;);</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>SSH远程登录Mac</title>
      <link href="/2019/04/26/SSH%E8%BF%9C%E7%A8%8B%E7%99%BB%E5%BD%95Mac/"/>
      <url>/2019/04/26/SSH%E8%BF%9C%E7%A8%8B%E7%99%BB%E5%BD%95Mac/</url>
      
        <content type="html"><![CDATA[<ol><li><p>macOS的Terminal自带ssh，可通过whereis查看:<code>whereis ssh</code>。</p></li><li><p>启用SSHD服务<br>进入“系统偏好设置(System Preferences)”-&gt;选择“共享(Sharing)”-&gt;勾选“远程登录(Remote Login)”<br><br>完成后可用<code>ssh localhost</code>进行测试，如果提示输入密码认证就没问题了。</p></li><li><p>SSH和SCP</p><ul><li>ssh连接其他主机：<br><br><code>ssh username@192.168.1.1</code><br><br>username为要登录的主机名,192.168.1.1为要登录主机的IP地址</li><li>scp文件传输<br><br>scp的简单使用如下:<br><br><code>scp filename username@192.168.1.1:/tmp</code><br><br><strong> 不过一开始我没有传到/tmp目录下，遇到了Permission denied的问题， </strong><br><br>查了一些资料发现可能是那个目录没有操作权限的问题，默认的操作权限在/tmp目录下。</li></ul></li></ol>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>Vue常用属性</title>
      <link href="/2019/04/23/Vue%E5%B8%B8%E7%94%A8%E5%B1%9E%E6%80%A7/"/>
      <url>/2019/04/23/Vue%E5%B8%B8%E7%94%A8%E5%B1%9E%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<h2 id="Vue-js的7个常用属性"><a href="#Vue-js的7个常用属性" class="headerlink" title="Vue.js的7个常用属性"></a>Vue.js的7个常用属性</h2><ul><li>el<br><em>用来指示vue编译器从什么地方开始解析 vue的语法，可以说是一个占位符。</em></li><li>data<br><em>用来组织从view中抽象出来的属性，可以说将视图的数据抽象出来存放在data中。</em></li><li>template<br><em>用来设置模板，会替换页面元素，包括占位符。</em></li><li>methods<br><em>页面的业务逻辑，存放js方法</em></li><li>render<br><em>创建虚拟DOM</em></li><li>computed<br><em>计算属性</em></li><li>watch<br><em><code>watch:function(newValue,oldValue){}</code><br>监听data中数据的变化，参数包含旧值和新值</em></li></ul>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>div的父子关系</title>
      <link href="/2019/04/21/div%E7%9A%84%E7%88%B6%E5%AD%90%E5%85%B3%E7%B3%BB/"/>
      <url>/2019/04/21/div%E7%9A%84%E7%88%B6%E5%AD%90%E5%85%B3%E7%B3%BB/</url>
      
        <content type="html"><![CDATA[<h2 id="子div有内容，父div的高度为何为0？"><a href="#子div有内容，父div的高度为何为0？" class="headerlink" title="子div有内容，父div的高度为何为0？"></a>子div有内容，父div的高度为何为0？</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">        .a&#123;    </span></span><br><span class="line"><span class="undefined">            background-color: orange;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">        .b&#123;</span></span><br><span class="line"><span class="undefined">            height: 50px;</span></span><br><span class="line"><span class="undefined">            width: 50px;</span></span><br><span class="line"><span class="undefined">            background-color: blue;</span></span><br><span class="line"><span class="undefined">            float: left;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"a"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"b"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果图:<br><img src="/2019/04/21/div的父子关系/diva.png" alt="div a"><br>一个父视图包含一个子视图，子div有高度，父div高度为0</p><h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><p>当一个元素只包含浮动元素的时候，它会出现高度折叠,即元素的上下底边重合，和高度为0效果一样。</p><p>当子div用绝对定位时<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.b&#123;</span><br><span class="line">    height: 50px;</span><br><span class="line">    width: 50px;</span><br><span class="line">    background-color: blue;</span><br><span class="line">    position: absolute;</span><br><span class="line">    left: 70%;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>父div高度j依旧为0，因为子元素绝对定位脱离文档流，不会撑开父元素，父元素高度为0。</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><ul><li>overflow的hidden属性<br>父div添加overflow的hidden属性</li><li>添加一个空的div<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"a"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"b"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"clear: both;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p><strong>这种方法是添加一个空的div，这个div和浮动元素同一级别，且位于浮动元素的最后。它在这里并不具有实际意义，它的作用只是撑开div标签而已。</strong></p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>GRE整理</title>
      <link href="/2019/01/14/GRE%E6%95%B4%E7%90%86/"/>
      <url>/2019/01/14/GRE%E6%95%B4%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="GRE"><a href="#GRE" class="headerlink" title="GRE"></a>GRE</h1><p><em>19年1月14日起的GRE学习和复习笔记</em><br><em>顺带准备雅思第二次考试</em><br><strong>第一次考试计划时间：19年2月末三月初</strong> </p><hr><h2 id="参考书籍"><a href="#参考书籍" class="headerlink" title="参考书籍"></a>参考书籍</h2><ul><li>GRE考试官方指南第三版</li><li>黑宝书</li><li>杨鹏长难句教程</li></ul><h2 id="GRE的考试架构"><a href="#GRE的考试架构" class="headerlink" title="GRE的考试架构"></a>GRE的考试架构</h2><p><em>机考总时长约为3小时45分钟</em></p><ol><li><p>Analytical Writing 分析性写作 6分<br><strong>清楚有效地阐明和支持复杂观点，考察其他观点及论证</strong><br>两篇作文，Issue（立论文）和Argument（驳论文），每篇30分钟，共60分钟。</p></li><li><p>Verbal Reasoning 文字推理 170分<br><strong>分析和评估书面材料，综合材料信息，可以理解为传统的阅读理解</strong><br>2*20道题，每部分30分钟，共60分钟。</p></li></ol><ul><li>Reading Comprehension 阅读理解<br>单选、多选和选句子</li><li>Text Completion 段落完形填空<br>完型</li><li>Sentence Equivalence 同义句填空<br>六选二，选出两个合适的同义词填在句子中</li></ul><ol start="3"><li>Quantitative Reasoning 数量推理 170分<br><strong>基本的数学技能，对算数、代数和几何的基本数学概念的理解，数据分析</strong><br>2*20道题，每部分35分钟，共70分钟。<strong>有屏幕计算器功能</strong></li></ol><ul><li>Quantitative Comparison questions 数量比较题</li><li>Multiple-choice questions–Select One Answer Choice 单选题</li><li>Multiple-choice questions–Select One or More Answer Choices 多选题</li><li>Numeric Entry questions 数字填空题</li></ul><ol start="4"><li>Unscored 不计分部分<br>20题</li></ol><h2 id="复习规划"><a href="#复习规划" class="headerlink" title="复习规划"></a>复习规划</h2><ul><li>准备周期：六到八周<br><strong>第1-2周</strong>    1.14—1.27   每天做OG&gt;=2组的阅读和数学，黑宝书3个list。<strong>单词是关键</strong><br><strong>第3周</strong>       1.27—2.3     每天背2个list，杨鹏长难句教程，OG题&gt;=3组。<br><strong>第4周</strong>       2.4—2.10     每天尽力做section，后半段进入数学准备，看钱永强第二三部分逻辑解题方法。<br><strong>第5周</strong>       2.10—2.17   背单词本生僻字，继续钱永强，做精选LSAT逻辑组题。<br><strong>第6周</strong>       2.17—2.24   上午太傻类比反义大全，PP2 review填空大部分是重题，做题+总结。<br><strong>第7周</strong>       2.24—3.3     黑宝书每天过，看机经，练习。</li></ul><h2 id="每日迭代"><a href="#每日迭代" class="headerlink" title="每日迭代"></a>每日迭代</h2><p>2019-01.14      列计划，整理资料</p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>iOS开发页面传值的四种方式</title>
      <link href="/2018/12/21/iOS-valuePass-1/"/>
      <url>/2018/12/21/iOS-valuePass-1/</url>
      
        <content type="html"><![CDATA[<h1 id="iOS开发页面传值的四种方式"><a href="#iOS开发页面传值的四种方式" class="headerlink" title="iOS开发页面传值的四种方式"></a>iOS开发页面传值的四种方式</h1><p><em>前两天帮同学用swift解决了Block和代理传值，想到还没整理过OC的页面传值，原理都一样只是语法上的差异</em></p><hr><h3 id="一、属性传值"><a href="#一、属性传值" class="headerlink" title="一、属性传值"></a>一、属性传值</h3><p><strong>适合情况</strong>：页面A向页面B传值<br><strong>步骤</strong>：<br>1、B_VC.h中声明一个textString属性，用于接收传来的字符串<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#import &lt;UIKit/UIKit.h&gt;</span></span><br><span class="line"></span><br><span class="line">NS_ASSUME_NONNULL_BEGIN</span><br><span class="line"></span><br><span class="line">@interface B_VC : UIViewController</span><br><span class="line">@property (nonatomic , strong) NSString *textString;</span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">NS_ASSUME_NONNULL_END</span><br></pre></td></tr></table></figure></p><p>m中创建label用于显示<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">- (void) propertyValuePass&#123;</span><br><span class="line">    UILabel *label = [[UILabel alloc] initWithFrame:CGRectMake(SCREEN_WIDTH*0.25, SCREEN_HEIGHT*0.15, SCREEN_WIDTH*0.5, SCREEN_HEIGHT*0.05)];</span><br><span class="line">    label.backgroundColor = [UIColor purpleColor];</span><br><span class="line">    label.textColor = [UIColor whiteColor];</span><br><span class="line">    label.textAlignment = NSTextAlignmentCenter;</span><br><span class="line">    label.font = [UIFont systemFontOfSize:20];</span><br><span class="line">    label.numberOfLines = 0;</span><br><span class="line">    label.text = self.textString;</span><br><span class="line">    [self.view addSubview:label];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>2、A_VC中创建输入框和跳转按钮<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#import "A_VC.h"</span></span><br><span class="line"><span class="comment">#import "B_VC.h"</span></span><br><span class="line"><span class="comment">#define SCREEN_WIDTH ([[UIScreen mainScreen] bounds].size.width)</span></span><br><span class="line"><span class="comment">#define SCREEN_HEIGHT ([[UIScreen mainScreen] bounds].size.height)</span></span><br><span class="line">@interface A_VC ()</span><br><span class="line">@property(nonatomic , strong) UITextField *textField;</span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">@implementation A_VC</span><br><span class="line">- (void) viewDidLoad &#123;</span><br><span class="line">    [super viewDidLoad];</span><br><span class="line">    //输入框</span><br><span class="line">    self.textField = [[UITextField alloc] initWithFrame:CGRectMake(SCREEN_WIDTH*0.25, SCREEN_HEIGHT*0.15, SCREEN_WIDTH*0.5, SCREEN_HEIGHT*0.05)];</span><br><span class="line">    self.textField.backgroundColor = [UIColor purpleColor];</span><br><span class="line">    self.textField.placeholder = @<span class="string">"属性传值"</span>;</span><br><span class="line">    self.textField.textAlignment = NSTextAlignmentCenter;</span><br><span class="line">    self.textField.textColor = [UIColor whiteColor];</span><br><span class="line">    [self.view addSubview:self.textField];</span><br><span class="line">    // 创建一个轻拍手势，当点击屏幕任何一个地方，就取消键盘的第一响应，隐藏键盘</span><br><span class="line">    UITapGestureRecognizer *tap = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(handleTap:)];</span><br><span class="line">    [self.view addGestureRecognizer:tap];</span><br><span class="line">    //跳转按钮</span><br><span class="line">    UIButton *button = [UIButton buttonWithType:UIButtonTypeCustom];</span><br><span class="line">    button.frame = CGRectMake(SCREEN_WIDTH*0.25, SCREEN_HEIGHT*0.23, SCREEN_WIDTH*0.5, SCREEN_HEIGHT*0.05);</span><br><span class="line">    [button setTitle:@<span class="string">"下一页"</span> forState:UIControlStateNormal];</span><br><span class="line">    button.titleLabel.font = [UIFont systemFontOfSize:20];</span><br><span class="line">    button.backgroundColor = [UIColor purpleColor];</span><br><span class="line">    [button addTarget:self action:@selector(clickAction:) forControlEvents:UIControlEventTouchUpInside];</span><br><span class="line">    [self.view addSubview:button];</span><br><span class="line">&#125;</span><br><span class="line">//放弃作为第一响应者</span><br><span class="line">- (void) handleTap:(id)sender &#123;</span><br><span class="line">    [self.textField resignFirstResponder];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//页面跳转</span><br><span class="line">-(void) clickAction:(id)sender &#123;</span><br><span class="line">    //从storyboard拿页面</span><br><span class="line">    UIStoryboard *sb = [UIStoryboard storyboardWithName:@<span class="string">"Main"</span> bundle:[NSBundle mainBundle]];</span><br><span class="line">    B_VC *B = [sb instantiateViewControllerWithIdentifier:@<span class="string">"B"</span>];</span><br><span class="line">    B.textString = self.textField.text;</span><br><span class="line">    [self.navigationController pushViewController:B animated:YES];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure></p><p>效果</p><center class="half"><br><img src="/2018/12/21/iOS-valuePass-1/A1.png" height="330" width="190"><img src="/2018/12/21/iOS-valuePass-1/B1.png" height="330" width="190"><br></center><p><strong>属性传值的核心就是在一个页面通过使用另一个页面的属性，利用这个属性来保存需要传递的信息，从而达到在另一个页面能使用前一个页面传递过来的信息。</strong></p><h3 id="二、Block传值"><a href="#二、Block传值" class="headerlink" title="二、Block传值"></a>二、Block传值</h3><p><strong>适合情况</strong>：页面B向页面A传值<br><strong>步骤</strong>：<br>1、A页面创建一个用于显示B页面输入内容的label<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#import &lt;UIKit/UIKit.h&gt;</span></span><br><span class="line"></span><br><span class="line">NS_ASSUME_NONNULL_BEGIN</span><br><span class="line"></span><br><span class="line">@interface A_VC2 : UIViewController</span><br><span class="line">@property (nonatomic,retain) UILabel *label;</span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">NS_ASSUME_NONNULL_END</span><br></pre></td></tr></table></figure></p><p>2、B页面的.h文件里创建一个用于传值的Block，一个Block方法和一个textfield<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#import &lt;UIKit/UIKit.h&gt;</span></span><br><span class="line"></span><br><span class="line">NS_ASSUME_NONNULL_BEGIN</span><br><span class="line">typedef void (^ReturnTextBlock)(NSString *showText);</span><br><span class="line">@interface B_VC2 : UIViewController</span><br><span class="line">@property (nonatomic,retain) UITextField *tf;</span><br><span class="line"></span><br><span class="line">@property (nonatomic,copy) ReturnTextBlock returnTextBlock;//定义的一个Block属性</span><br><span class="line"></span><br><span class="line">- (void)returnText:(ReturnTextBlock)block;</span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">NS_ASSUME_NONNULL_END</span><br></pre></td></tr></table></figure></p><p>3、将传递过来的block赋值给自己的属性block，然后找一个时机给block传递数据，这里选取页面将要消失时传值<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#import "B_VC2.h"</span></span><br><span class="line"><span class="comment">#define SCREEN_WIDTH ([[UIScreen mainScreen] bounds].size.width)</span></span><br><span class="line"><span class="comment">#define SCREEN_HEIGHT ([[UIScreen mainScreen] bounds].size.height)</span></span><br><span class="line">@interface B_VC2 ()</span><br><span class="line"></span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">@implementation B_VC2</span><br><span class="line"></span><br><span class="line">- (void)viewDidLoad &#123;</span><br><span class="line">    [super viewDidLoad];</span><br><span class="line">    //定义一个输入框 将文字传给第一个界面，并且显示在前一个页面的UILabel上</span><br><span class="line">    self.tf = [[UITextField alloc]initWithFrame:CGRectMake(SCREEN_WIDTH*0.25, SCREEN_HEIGHT*0.15, SCREEN_WIDTH*0.5, SCREEN_HEIGHT*0.05)];</span><br><span class="line">    self.tf.backgroundColor = [UIColor blackColor];</span><br><span class="line">    self.tf.textColor = [UIColor whiteColor];</span><br><span class="line">    self.tf.textAlignment = NSTextAlignmentCenter;</span><br><span class="line">    self.tf.placeholder = @<span class="string">"请输入内容"</span>;</span><br><span class="line">    [self.view addSubview:self.tf];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/*在第一个界面传进来一个Block语句块的函数，把传进来的Block语句块保存到本类的实例变</span><br><span class="line">量returnTextBlock（.h中定义的属性）中，然后寻找一个时机调用*/</span><br><span class="line">-(void)returnText:(ReturnTextBlock)block&#123;</span><br><span class="line">    self.returnTextBlock = block;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//而这个时机就是当视图将要消失的时候，需要重写：</span><br><span class="line">-(void)viewWillDisappear:(BOOL)animated&#123;</span><br><span class="line">    <span class="keyword">if</span> (self.returnTextBlock !=nil) &#123;</span><br><span class="line">    self.returnTextBlock(self.tf.text);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure></p><p>3、A页面c读取Blockd传递的数据并显示，要注意在跳转处赋值<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#import "A_VC2.h"</span></span><br><span class="line"><span class="comment">#import "B_VC2.h"</span></span><br><span class="line"><span class="comment">#define SCREEN_WIDTH ([[UIScreen mainScreen] bounds].size.width)</span></span><br><span class="line"><span class="comment">#define SCREEN_HEIGHT ([[UIScreen mainScreen] bounds].size.height)</span></span><br><span class="line">@interface A_VC2 ()</span><br><span class="line"></span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">@implementation A_VC2</span><br><span class="line"></span><br><span class="line">- (void)viewDidLoad &#123;</span><br><span class="line">    [super viewDidLoad];</span><br><span class="line">    //跳转按钮</span><br><span class="line">    UIButton *button = [UIButton buttonWithType:UIButtonTypeCustom];</span><br><span class="line">    button.frame = CGRectMake(SCREEN_WIDTH*0.25, SCREEN_HEIGHT*0.23, SCREEN_WIDTH*0.5, SCREEN_HEIGHT*0.05);</span><br><span class="line">    button.backgroundColor = [UIColor blackColor];</span><br><span class="line">    button.titleLabel.textColor = [UIColor whiteColor];</span><br><span class="line">    [button setTitle:@<span class="string">"下一页"</span> forState:UIControlStateNormal];</span><br><span class="line">    [button addTarget:self action:@selector(clickAction:) forControlEvents:UIControlEventTouchUpInside];</span><br><span class="line">    [self.view addSubview:button];</span><br><span class="line">    //label</span><br><span class="line">    self.label = [[UILabel alloc] initWithFrame:CGRectMake(SCREEN_WIDTH*0.25, SCREEN_HEIGHT*0.15, SCREEN_WIDTH*0.5, SCREEN_HEIGHT*0.05)];</span><br><span class="line">    self.label.backgroundColor = [UIColor blackColor];</span><br><span class="line">    self.label.textColor = [UIColor whiteColor];</span><br><span class="line">    self.label.textAlignment = NSTextAlignmentCenter;</span><br><span class="line">    [self.view addSubview:self.label];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void) clickAction:(id)sender&#123;</span><br><span class="line">    //从storyboard拿页面</span><br><span class="line">    UIStoryboard *sb = [UIStoryboard storyboardWithName:@<span class="string">"Main"</span> bundle:[NSBundle mainBundle]];</span><br><span class="line">    B_VC2 *B = [sb instantiateViewControllerWithIdentifier:@<span class="string">"B2"</span>];</span><br><span class="line">    //跳转处赋值</span><br><span class="line">    [B returnText:^(NSString * _Nonnull showText) &#123;</span><br><span class="line">    self.label.text = showText;</span><br><span class="line">    &#125;];</span><br><span class="line">    [self.navigationController pushViewController:B animated:YES];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure></p><p>效果</p><center class="half"><br><img src="/2018/12/21/iOS-valuePass-1/A2.png" height="330" width="190"><img src="/2018/12/21/iOS-valuePass-1/B2.png" height="330" width="190"><br></center><p><strong>Block传值是将值保存在代码块中，通过关联传递过来的代码块（页面一）与自己的属性代码块（页面二），以及使用代码块传值（页面二），回到页面一中，页面一回调代码块，以获取代码块传递过来的值。</strong></p>]]></content>
      
      
      
    </entry>
    
  
  
</search>
